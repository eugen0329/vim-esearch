Include: helper.vader

Before:
  let g:esearch.cwd = 'spec/fixtures/write_conflicts'.g:test_number.next().'/'
  let g:esearch.pattern = '.'
  let g:file = g:esearch.cwd.'file.txt'
  let g:untouched_file = g:esearch.cwd.'untouched.txt'
  exe 'bwipe!' Fixture(g:file, ['l1', 'l2', 'l3'])
  call Fixture(g:untouched_file, ['untouched_line1'])
  let &directory = g:esearch.cwd
  messages clear

After:
  au! SwapExists *
  Assert UndotreeIsConsistent(), UndotreeIsInconsistentMsg()
  AssertEqual readfile(g:untouched_file), ['untouched_line1']
  silent! call bufload(g:untouched_file)
  AssertEqual getbufline(bufnr(g:untouched_file), 1, '$'), ['untouched_line1']
  Assert !getbufvar(g:untouched_file, '&modified'), 'expected to not be modified'

Execute (Resolve existing swap file):
  call delete(g:file.'.swp')
  let [g:swap_file, g:swap_prompt_appeared] = [Fixture(g:file.'.swp', ['']), 0]
  au SwapExists * let v:swapchoice = 'q' | let g:swap_prompt_appeared = 1

  call esearch#init()
  exe "norm /l2\<CR>dd:write\<CR>j"
Then:
  Assert exists('b:esearch')
  Assert !g:swap_prompt_appeared
  AssertEqual Messages()[-2:],
    \ ["Can't write changes to the following files:",
    \  '  '.g:file.' (swapfile exists)']
  " Verify that the file can't be opened without the prompt
  exe "norm \<cr>"
  Assert exists('b:esearch') && g:swap_prompt_appeared

### Handle delete

Execute (Resolve "-line2" with "~line2" after search):
  call esearch#init()
  call writefile(['l1', 'changed2', 'l3'], g:file)
  exe "norm /l2\<CR>dd:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'changed2', 'l3']
  Assert CantWrite('file.txt')
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     3 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "-line2" with "+line4" below after search):
  call esearch#init()
  call writefile(['l1', 'l2', 'l3', 'added4'], g:file)
  exe "norm /l2\<CR>dd:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'l3', 'added4']
Expect esearch_test(rerender line numbers):
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "-line2" with "+line0" after search):
  call esearch#init()
  call writefile(['added0', 'l1', 'l2', 'l3'], g:file)
  exe "norm /l2\<CR>dd:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['added0', 'l1', 'l2', 'l3']
  Assert CantWrite('file.txt')
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     3 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "-line2" with "-line3" after search):
  call esearch#init()
  call writefile(['l1', 'l2'], g:file)
  exe "norm /l2\<CR>dd:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1']
# TODO?
Expect esearch_test(rerender line numbers):
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "-line2" with "-line1" after search):
  call esearch#init()
  call writefile(['l2', 'l3'], g:file)
  exe "norm /l2\<CR>dd:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l2', 'l3']
  Assert CantWrite('file.txt')
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     3 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "-line2" with "~line3" after search):
  call esearch#init()
  call writefile(['l1', 'l2', 'changed3'], g:file)
  exe "norm /l2\<CR>dd:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'changed3']
Expect esearch_test(rerender line numbers):
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "-line2" with "~line1" after search):
  call esearch#init()
  call writefile(['changed1', 'l2', 'l3'], g:file)
  exe "norm /l2\<CR>dd:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['changed1', 'l3']
Expect esearch_test(rerender line numbers):
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l3

  untouched.txt
     1 untouched_line1

" ### Handle change

Execute (Resolve "~line2" with "~line2" after search):
  call esearch#init()
  call writefile(['l1', 'changed2', 'l3'], g:file)
  exe "norm /l2\<CR>A~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'changed2', 'l3']
  Assert CantWrite('file.txt')
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2~~~
     3 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "~line2" with "+line4" below after search):
  call esearch#init()
  call writefile(['l1', 'l2', 'l3', 'added4'], g:file)
  exe "norm /l2\<CR>A~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'l2~~~', 'l3', 'added4']
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2~~~
     3 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "~line2" with "+line0" after search):
  call esearch#init()
  call writefile(['added0', 'l1', 'l2', 'l3'], g:file)
  exe "norm /l2\<CR>A~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['added0', 'l1', 'l2', 'l3']
  Assert CantWrite('file.txt')
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2~~~
     3 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "~line2" with "-line3" after search):
  call esearch#init()
  call writefile(['l1', 'l2'], g:file)
  exe "norm /l2\<CR>A~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'l2~~~']
# TODO?
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2~~~
     3 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "~line2" with "-line1" after search):
  call esearch#init()
  call writefile(['l2', 'l3'], g:file)
  exe "norm /l2\<CR>A~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l2', 'l3']
  Assert CantWrite('file.txt')
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2~~~
     3 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "~line2" with "~line3" after search):
  call esearch#init()
  call writefile(['l1', 'l2', 'changed3'], g:file)
  exe "norm /l2\<CR>A~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'l2~~~', 'changed3']
# TODO?
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2~~~
     3 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "~line2" with "~line1" after search):
  call esearch#init()
  call writefile(['changed1', 'l2', 'l3'], g:file)
  exe "norm /l2\<CR>A~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['changed1', 'l2~~~', 'l3']
# TODO?
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2~~~
     3 l3

  untouched.txt
     1 untouched_line1

### Handle add

Execute (Resolve "+line2" with "~line2" after search):
  call esearch#init()
  call writefile(['l1', 'changed2', 'l3'], g:file)
  exe "norm /l2\<CR>A\<CR>~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'changed2', 'l3']
  Assert CantWrite('file.txt')
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2
   + 2 ~~~
     3 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "v+line2" with "+line4" below after search):
  call esearch#init()
  call writefile(['l1', 'l2', 'l3', 'added4'], g:file)
  exe "norm /l2\<CR>A\<CR>~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'l2', '~~~', 'l3', 'added4']
Expect esearch_test(rerender line numbers):
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2
     3 ~~~
     4 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "v+line2" with "+line0" after search):
  call esearch#init()
  call writefile(['added0', 'l1', 'l2', 'l3'], g:file)
  exe "norm /l2\<CR>A\<CR>~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['added0', 'l1', 'l2', 'l3']
  Assert CantWrite('file.txt')
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2
   + 2 ~~~
     3 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "v+line2" with "-line3" after search):
  call esearch#init()
  call writefile(['l1', 'l2'], g:file)
  exe "norm /l2\<CR>A\<CR>~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'l2', '~~~']
Expect esearch_test(rerender line numbers):
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2
     3 ~~~
     4 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "v+line2" with "-line1" after search):
  call esearch#init()
  call writefile(['l2', 'l3'], g:file)
  exe "norm /l2\<CR>A\<CR>~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l2', 'l3']
  Assert CantWrite('file.txt')
Expect esearch_test:
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2
   + 2 ~~~
     3 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "v+line2" with "~line3" after search):
  call esearch#init()
  call writefile(['l1', 'l2', 'changed3'], g:file)
  exe "norm /l2\<CR>A\<CR>~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'l2', '~~~', 'changed3']
# TODO?
Expect esearch_test(rerender line numbers):
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2
     3 ~~~
     4 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "v+line2" with "~line1" after search):
  call esearch#init()
  call writefile(['changed1', 'l2', 'l3'], g:file)
  exe "norm /l2\<CR>A\<CR>~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['changed1', 'l2', '~~~', 'l3']
# TODO?
Expect esearch_test(rerender line numbers):
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2
     3 ~~~
     4 l3

  untouched.txt
     1 untouched_line1

### Handle specific lines adding

Execute (Resolve "^+line1"):
  call esearch#init()
  exe "norm /file.txt\<CR>A\<CR>~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['~~~', 'l1', 'l2', 'l3']
Expect esearch_test(rerender line numbers):
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 ~~~
     2 l1
     3 l2
     4 l3

  untouched.txt
     1 untouched_line1

Execute (Resolve "v+line$"):
  call esearch#init()
  exe "norm /l3\<CR>A\<CR>~~~\<esc>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'l2', 'l3', '~~~']
Expect esearch_test(rerender line numbers):
  Matches in 4 lines, 2 files. Finished.

  file.txt
     1 l1
     2 l2
     3 l3
     4 ~~~

  untouched.txt
     1 untouched_line1
