Include: helper.vader

Execute(setup):
  au FileType defx nnoremap <nowait><buffer><expr><cr> defx#do_action('open_or_close_tree')
  au FileType fern nmap <nowait><buffer><cr> :exe 'FernReveal' fern#helper#new().sync.get_cursor_node().name '-wait'<CR>
  let g:NETRPreviewDefaultOn = 0
  source ~/.cache/esearch-dev/plugins/vim-netranger/plugin/netranger.vim
  call NetrangerInit()
  au! NETRANGER_LAZY_INIT
  au! NETRANGER BufEnter
  au! NERDTreeHijackNetrw

Before:
  Save g:esearch
  let g:esearch.cwd = 'spec/fixtures/filemanager'.g:test_number.next().'/'
  let g:file1 = 'dir1/file1.txt'
  let g:file1keep = 'dir1/.keep'
  let g:file2 = 'file2.txt'
  let g:file3 = 'file3.txt'
  call esearch#stderr#incremental('workaround to avoid vader bug', ['with autoload fail'])
  tabnew
After:
  Restore g:esearch

Execute:
  exe 'bwipe!' Fixture(g:esearch.cwd.g:file1, ['1.l1', '1.l2'])
  exe 'bwipe!' Fixture(g:esearch.cwd.g:file2, ['2.l1', '2.l2'])

  " Defx is harder to setup for neovim, netranger fails in vim
  for open_filer in has('nvim') ? ['Fern -wait', 'NETRTabdrop', 'NERDTree', 'Dirvish'] : ['Defx']
    Log open_filer

    Log "\tdir hover"
    exe open_filer g:esearch.cwd
    let bufnr = bufnr('')
    exe "norm /dir1\<CR>\<plug>(esearch).\<CR>"
    AssertEqual join(getline(1, '$'), "\n"), join([
        \ 'Matches in 2 lines, 1 file. Finished.',
        \ '',
        \ 'dir1/file1.txt',
        \ '   1 1.l1',
        \ '   2 1.l2',
        \], "\n")
    silent! exe 'bwipe' bufnr

    Log "\tfile inside of a dir hover"
    exe open_filer g:esearch.cwd
    let bufnr = bufnr('')
    exe "norm /dir1\<CR>\<CR>/file1\<CR>\<plug>(esearch).\<CR>"
    AssertEqual join(getline(1, '$'), "\n"), join([
        \ 'Matches in 2 lines, 1 file. Finished.',
        \ '',
        \ 'dir1/file1.txt',
        \ '   1 1.l1',
        \ '   2 1.l2',
        \], "\n")
    silent! exe 'bwipe' bufnr

    Log "\tfile VISUAL"
    exe open_filer g:esearch.cwd
    let bufnr = bufnr('')
    exe "norm /file2\<CR>V\<plug>(operator-esearch-exec).\<CR>"
    AssertEqual join(getline(1, '$'), "\n"), join([
        \ 'Matches in 2 lines, 1 file. Finished.',
        \ '',
        \ 'file2.txt',
        \ '   1 2.l1',
        \ '   2 2.l2',
        \], "\n")
    silent! exe 'bwipe' bufnr

    Log "\trange VISUAL"
    exe open_filer g:esearch.cwd
    let bufnr = bufnr('')
    exe "norm /dir1\<CR>VG\<plug>(operator-esearch-exec).\<CR>"
    AssertEqual join(getline(1, '$'), "\n"), join([
        \ 'Matches in 4 lines, 2 files. Finished.',
        \ '',
        \ 'dir1/file1.txt',
        \ '   1 1.l1',
        \ '   2 1.l2',
        \ '',
        \ 'file2.txt',
        \ '   1 2.l1',
        \ '   2 2.l2',
        \], "\n")
    silent! exe 'bwipe' bufnr
  endfor

Execute(search in marked):
  exe 'bwipe!' Fixture(g:esearch.cwd.g:file1, ['1.l1', '1.l2'])
  exe 'bwipe!' Fixture(g:esearch.cwd.g:file2, ['2.l1', '2.l2'])
  exe 'bwipe!' Fixture(g:esearch.cwd.g:file3, ['3.l1', '3.l2'])
  " Fern -wait hangs in vim. Others don't have selected nodes getters
  for open_filer in has('nvim') ? ['Fern -wait'] : []
    Log open_filer

    exe open_filer g:esearch.cwd
    let bufnr = bufnr('')
    exe "norm /file2\<CR>-/file3\<CR>-\<plug>(esearch).\<CR>"
    AssertEqual join(getline(1, '$'), "\n"), join([
      \ 'Matches in 4 lines, 2 files. Finished.',
      \ '',
      \ 'file2.txt',
      \ '   1 2.l1',
      \ '   2 2.l2',
      \ '',
      \ 'file3.txt',
      \ '   1 3.l1',
      \ '   2 3.l2',
      \], "\n")
    silent! exe 'bwipe' bufnr
  endfor

Execute(search with restricting git-log):
  exe 'bwipe!' Fixture(g:esearch.cwd.g:file1, ['1.l1', '1.l2'])
  exe 'bwipe!' Fixture(g:esearch.cwd.g:file2, ['2.l1', '2.l2'])
  call system('git init ' . g:esearch.cwd)
  call system('git -C ' . g:esearch.cwd . ' add -A')
  call system('git -C ' . g:esearch.cwd . ' commit -m "any message"')

  for open_filer in has('nvim') ? ['Fern -wait', 'NETRTabdrop', 'NERDTree', 'Dirvish'] : ['Defx']
    Log open_filer

    exe open_filer g:esearch.cwd
    let bufnr = bufnr('')
    exe "norm /dir1\<CR>"
    call esearch#init({'paths': esearch#xargs#git_log(), 'pattern': '.'})
    Assert join(getline(1, '$'), "\n") =~# join([
      \ 'Matches in 2 lines, 1 file. Finished.',
      \ '',
      \ '\x\{40}:dir1/file1.txt',
      \ '   1 1.l1',
      \ '   2 1.l2',
      \], "\n")
    silent! exe 'bwipe' bufnr
  endfor

Execute(search with restricting git-stash):
  exe 'bwipe!' Fixture(g:esearch.cwd.g:file1, ['1.l1', '1.l2'])
  exe 'bwipe!' Fixture(g:esearch.cwd.g:file1keep, [])
  exe 'bwipe!' Fixture(g:esearch.cwd.g:file2, ['2.l1', '2.l2'])
  exe 'bwipe!' Fixture(g:esearch.cwd.g:file3, ['3.l1', '3.l2'])
  call system('git init ' . g:esearch.cwd)
  call system('git -C ' . g:esearch.cwd . ' add ' . g:file3)
  call system('git -C ' . g:esearch.cwd . ' commit -m "any message"')
  call system('git -C ' . g:esearch.cwd . ' add ' . g:file1)
  call system('git -C ' . g:esearch.cwd . ' add ' . g:file2)
  call system('git -C ' . g:esearch.cwd . ' stash clear')
  call system('git -C ' . g:esearch.cwd . ' stash')

  for open_filer in has('nvim') ? ['Fern -wait', 'NETRTabdrop', 'NERDTree', 'Dirvish'] : ['Defx']
    Log open_filer

    exe open_filer g:esearch.cwd
    let bufnr = bufnr('')
    exe "norm /dir1\<CR>"
    call esearch#init({'paths': esearch#xargs#git_stash(), 'pattern': '.'})
    Assert join(getline(1, '$'), "\n") =~# join([
      \ 'Matches in 2 lines, 1 file. Finished.',
      \ '',
      \ 'stash@\\{\d\+}:dir1/file1.txt',
      \ '   1 1.l1',
      \ '   2 1.l2',
      \], "\n"), string(getline(1, '$'))
    silent! exe 'bwipe' bufnr
  endfor
